{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/nanoid/index.browser.js","views/Appointment/ReadOnlyRow.js","views/Appointment/EditableRow.js","views/Appointment/Doctor schedule/Doctor schedule.js"],"names":["_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","_arrayLikeToArray","arr","len","length","i","arr2","_slicedToArray","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","next","done","push","value","err","unsupportedIterableToArray","TypeError","_toConsumableArray","arrayLikeToArray","iter","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toUpperCase","ReadOnlyRow","contact","handleEditClick","handleDeleteClick","Doctor_Name","Department","AvailableDys","AvailableTime","className","onClick","event","class","EditableRow","editFormData","handleEditFormChange","handleCancelClick","type","required","placeholder","onChange","Doctor_schedule","useState","data","contacts","setContacts","setEditFormData","editContactId","setEditContactId","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","to","onSubmit","editedContact","map"],"mappings":"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","file":"static/js/10.ce26d924.chunk.js","sourcesContent":["import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { urlAlphabet } from './url-alphabet/index.js'\nif (process.env.NODE_ENV !== 'production') {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you donâ€™t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you donâ€™t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React from \"react\";\r\n\r\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\r\n    return (\r\n        <tr>\r\n            <td>{contact.Doctor_Name}</td>\r\n            <td>{contact.Department}</td>\r\n            <td>{contact.AvailableDys}</td>\r\n            <td>{contact.AvailableTime}</td>\r\n            \r\n            <td>\r\n                <button className=\"btn btn-sm px-0 py-0 btn-primary \"\r\n                    onClick={(event) => handleEditClick(event, contact)}\r\n                >\r\n                    <i class=\"fas fa-edit\"  ></i>\r\n\r\n                </button>\r\n                \r\n                \r\n                \r\n                <button className=\"btn-danger btn-sm px-0 py-0 btn btn-sm\"\r\n                  onClick={() => handleDeleteClick(contact.id)}\r\n                >\r\n                    <i class=\"fas fa-trash\"></i>\r\n\r\n                </button>\r\n\r\n                \r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default ReadOnlyRow;","import React from \"react\";\r\n\r\nconst EditableRow = ({\r\n  editFormData,\r\n  handleEditFormChange,\r\n  handleCancelClick,\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter doctor_name\"\r\n          name=\"Doctor_Name\"\r\n          value={editFormData.Doctor_Name}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Department\"\r\n          name=\"Department\"\r\n          value={editFormData.Department}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"AvailableDays\"\r\n          name=\"AvailableDys\"\r\n          value={editFormData.AvailableDys}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"AvailableTime\"\r\n          name=\"AvailableTime\"\r\n          value={editFormData.AvailableTime}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      \r\n      \r\n      <td>\r\n        <button type=\"submit\" class=\"btn btn-primary\">Save</button>\r\n        <button  className=\"btn btn-danger\"type=\"button\" onClick={handleCancelClick}>\r\n          Cancel\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default EditableRow;\r\n","import React,{useState, Fragment} from \"react\";\r\nimport \"src/asset/plugins/bootstrap/css/bootstrap.min.css\";\r\nimport \"src/asset/css/main.css\";\r\nimport \"src/asset/plugins/dropzone/dropzone.css\";\r\nimport { Link } from 'react-router-dom'\r\nimport data from \"src/views/Appointment/mock-data.json\";\r\nimport ReadOnlyRow from \"src/views/Appointment/ReadOnlyRow\";\r\nimport EditableRow from \"src/views/Appointment/EditableRow\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n//import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n//import { faEdit , faDeleteLeft} from '@fortawesome/free-solid-svg-icons'\r\n/*import \"../../../asset/plugins/bootstrap/css/bootstrap.min.css\";\r\n\r\nimport \"../../../asset/css/main.css\";*/\r\n\r\n\r\n\r\nconst Doctor_schedule = () => {\r\n    const [contacts, setContacts] = useState(data);\r\n    const [addFormData, setAddFormData] = useState({\r\n        Doctor_Name: \"\",\r\n        Department: \"\",\r\n        AvailableDys: \"\",\r\n        AvailableTime: \"\"\r\n\r\n\r\n    });\r\n\r\n    const [editFormData, setEditFormData] = useState({\r\n        Doctor_Name: \"\",\r\n        Department: \"\",\r\n        AvailableDys: \"\",\r\n        AvailableTime: \"\"\r\n       \r\n\r\n    });\r\n\r\n    const [editContactId, setEditContactId] = useState(null);\r\n\r\n    const handleAddFormChange = (event) => {\r\n        event.preventDefault();\r\n\r\n        const fieldName = event.target.getAttribute(\"name\");\r\n        const fieldValue = event.target.value;\r\n\r\n        const newFormData = { ...addFormData };\r\n        newFormData[fieldName] = fieldValue;\r\n\r\n        setAddFormData(newFormData);\r\n    };\r\n\r\n    const handleEditFormChange = (event) => {\r\n        event.preventDefault();\r\n\r\n        const fieldName = event.target.getAttribute(\"name\");\r\n        const fieldValue = event.target.value;\r\n\r\n        const newFormData = { ...editFormData };\r\n        newFormData[fieldName] = fieldValue;\r\n\r\n        setEditFormData(newFormData);\r\n    };\r\n\r\n    const handleAddFormSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newContact = {\r\n            id: nanoid(),\r\n            Doctor_Name: addFormData.Doctor_Name,\r\n            Department: addFormData.Department,\r\n            AvailableDys: addFormData.AvailableDys,\r\n            AvailableTime: addFormData.AvailableTime,\r\n\r\n        };\r\n        const newContacts = [...contacts, newContact];\r\n        setContacts(newContacts);\r\n    };\r\n\r\n    const handleEditFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const editedContact = {\r\n            id: editContactId,\r\n            Doctor_Name: editFormData.Doctor_Name,\r\n            Department: editFormData.Department,\r\n            AvailableDys: editFormData.AvailableDys,\r\n            AvailableTime: editFormData.AvailableTime,\r\n\r\n        };\r\n\r\n        const newContacts = [...contacts];\r\n        const index = contacts.findIndex((contact) => contact.id === editContactId);\r\n\r\n        newContacts[index] = editedContact;\r\n\r\n        setContacts(newContacts);\r\n        setEditContactId(null);\r\n    };\r\n\r\n    const handleEditClick = (event, contact) => {\r\n        event.preventDefault();\r\n        setEditContactId(contact.id);\r\n        const formValues = {\r\n            Doctor_Name: contact.Doctor_Name,\r\n            Department: contact.Department,\r\n            AvailableDys: contact.AvailableDys,\r\n            AvailableTime: contact.AvailableTime,\r\n\r\n        };\r\n\r\n        setEditFormData(formValues);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        setEditContactId(null);\r\n    };\r\n\r\n    const handleDeleteClick = (contactId) => {\r\n        const newContacts = [...contacts];\r\n        const index = contacts.findIndex((contact) => contact.id === contactId);\r\n        newContacts.splice(index, 1);\r\n        setContacts(newContacts);\r\n    };\r\n\r\n    \r\n    return (\r\n        <>\r\n        <div>\r\n        <section class=\"content\">\r\n                    <div class=\"container-fluid\">\r\n                        <div class=\"block-header\">\r\n                            <h2>Doctor_schedule</h2>\r\n                            <small class=\"text-muted\">Welcome to Doctor</small>\r\n                        </div>\r\n                        <div class=\"row clearfix\">\r\n                            <div class=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                <div class=\"card\">\r\n                                    <div class=\"header\">\r\n                                        <h2>Doctor Schedule</h2>\r\n                                        <form class=\"form-inline d-flex my-2 my-lg-0\">\r\n                                        <Link to=\"Add schedule\">\r\n                                       <button class=\"col-2\" type=\"button\" class=\"btn btn-primary\">Add Schedule</button>\r\n                                       </Link>\r\n                                            {/*<input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                                            <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>*/}\r\n                                        </form>\r\n\r\n\r\n                                    </div>\r\n                                    <div class=\"body table-responsive\">\r\n                                    <form onSubmit={handleEditFormSubmit}>\r\n                                        <table class=\"table table-bordered table-striped table-hover js-basic-example dataTable\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>Doctor Name</th>\r\n                                                    <th>Department</th>\r\n                                                    <th>Available Days</th>\r\n                                                    <th>Available Time</th>\r\n                                                    <th>Status</th>\r\n                                                    \r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tfoot>\r\n                                            </tfoot>\r\n                                            <tbody>\r\n                                            {contacts.map((contact) => (\r\n                                                        <Fragment>\r\n                                                            {editContactId === contact.id ? (\r\n                                                                <EditableRow\r\n                                                                    editFormData={editFormData}\r\n                                                                    handleEditFormChange={handleEditFormChange}\r\n                                                                    handleCancelClick={handleCancelClick}\r\n                                                                />\r\n                                                            ) : (\r\n                                                                <ReadOnlyRow\r\n                                                                    contact={contact}\r\n                                                                    handleEditClick={handleEditClick}\r\n                                                                    handleDeleteClick={handleDeleteClick}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Fragment>\r\n                                                    ))}\r\n                                               \r\n                                               \r\n                                            </tbody>\r\n                                        </table>\r\n                                        </form>\r\n                                        {/*<form onSubmit={handleAddFormSubmit}>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"Doctor_Name\"\r\n                                                required=\"required\"\r\n                                                placeholder=\"Enter Doctor_Name\"\r\n                                                onChange={handleAddFormChange}\r\n                                            />\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"Department\"\r\n                                                required=\"required\"\r\n                                                placeholder=\"Department\"\r\n                                                onChange={handleAddFormChange}\r\n                                            />\r\n                                             <input\r\n                                                type=\"text\"\r\n                                                name=\"AvailableDys\"\r\n                                                required=\"required\"\r\n                                                placeholder=\"AvailableDys\"\r\n                                                onChange={handleAddFormChange}\r\n                                            />\r\n                                             <input\r\n                                                type=\"text\"\r\n                                                name=\"AvailableTime\"\r\n                                                required=\"required\"\r\n                                                placeholder=\"AvailableTime\"\r\n                                                onChange={handleAddFormChange}\r\n                                            />\r\n                                            <button className=\"btn btn-primary\" type=\"submit\">Add</button>\r\n                                            </form>*/}\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                   \r\n                </section>\r\n        </div>\r\n            \r\n\r\n        </>\r\n    )\r\n}\r\nexport default Doctor_schedule;"],"sourceRoot":""}